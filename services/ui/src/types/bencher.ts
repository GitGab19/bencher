/*
 Generated by typeshare 1.6.0
*/

export type BenchmarkName = string;

export type Boundary = OrderedFloat<number>;

export type BranchName = string;

export type Email = string;

export type GitHash = string;

export type Jwt = string;

export type NonEmpty = string;

export type ResourceId = string;

export type Secret = string;

export type Slug = string;

export type Url = string;

export type UserName = string;

/**
 * This type exists solely for generating type information
 * And it functions on the basis of having a name collision with `uuid::Uuid`
 * For all other use cases, use `uuid::Uuid` instead
 */
export type Uuid = string;

export enum PlanLevel {
	Free = "free",
	Team = "team",
	Enterprise = "enterprise",
}

export interface JsonSignup {
	name: UserName;
	slug?: Slug;
	email: Email;
	plan?: PlanLevel;
	invite?: Jwt;
}

export interface JsonLogin {
	email: Email;
	plan?: PlanLevel;
	invite?: Jwt;
}

export interface JsonAuthToken {
	token: Jwt;
}

export interface JsonUser {
	uuid: Uuid;
	name: UserName;
	slug: Slug;
	email: Email;
	admin: boolean;
	locked: boolean;
}

export interface JsonConfirm {
	user: JsonUser;
	token: Jwt;
}

export enum PlanStatus {
	Active = "active",
	Canceled = "canceled",
	Incomplete = "incomplete",
	IncompleteExpired = "incomplete_expired",
	PastDue = "past_due",
	Paused = "paused",
	Trialing = "trialing",
	Unpaid = "unpaid",
}

